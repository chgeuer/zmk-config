/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * Author: Christian Geuer-Pollmann
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/mouse.h>
#include "german-keymap.h"

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

#define LEFT_ROW_0       0  1  2  3  4  5  
#define LEFT_ROW_1      12 13 14 15 16 17
#define LEFT_ROW_2      24 25 26 27 28 29
#define LEFT_ROW_3               36 37 38
#define RIGT_ROW_0                         6  7  8  9 10 11
#define RIGT_ROW_1                        18 19 20 21 22 23
#define RIGT_ROW_2                        30 31 32 33 34 35
#define RIGT_ROW_3                        39 40 41
#define LEFT_ROWS_012   LEFT_ROW_0 LEFT_ROW_1 LEFT_ROW_2
#define RIGT_ROWS_012   RIGT_ROW_0 RIGT_ROW_1 RIGT_ROW_2

#define COMBO_TIMEOUT 50

/ {
        conditional_layers { compatible = "zmk,conditional-layers";
                tri_layer { if-layers = <LOWER RAISE>; then-layer = <ADJUST>; };
        };

        combos { compatible = "zmk,combos";
                // combo_layer_1 { timeout-ms = <COMBO_TIMEOUT>; key-positions = < 4  5>; bindings = <&to LOWER>;                       };
                // combo_layer_2 { timeout-ms = <COMBO_TIMEOUT>; key-positions = <16 17>; bindings = <&to RAISE>;                       };
                // combo_layer_3 { timeout-ms = <COMBO_TIMEOUT>; key-positions = <28 29>; bindings = <&to ADJUST>;                      }; 
                combo_de_ae   { timeout-ms = <COMBO_TIMEOUT>; key-positions = < 6  7>; bindings = <&kp DE_AE>;   layers = <DEFAULT>; };
                combo_de_oe   { timeout-ms = <COMBO_TIMEOUT>; key-positions = <18 19>; bindings = <&kp DE_OE>;   layers = <DEFAULT>; };
                combo_de_ss   { timeout-ms = <COMBO_TIMEOUT>; key-positions = < 7  8>; bindings = <&kp DE_SS>;   layers = <DEFAULT>; };
                combo_de_ue   { timeout-ms = <COMBO_TIMEOUT>; key-positions = <30 31>; bindings = <&kp DE_UE>;   layers = <DEFAULT>; };
                combo_de_acut { timeout-ms = <COMBO_TIMEOUT>; key-positions = <23 35>; bindings = <&kp DE_ACUT>; layers = <LOWER>;   };
                combo_page_up { timeout-ms = <COMBO_TIMEOUT>; key-positions = <11 23>; bindings = <&kp PG_UP>;   layers = <RAISE>;   };
                combo_page_dn { timeout-ms = <COMBO_TIMEOUT>; key-positions = <23 35>; bindings = <&kp PG_DN>;   layers = <RAISE>;   };                
        };

        behaviors {
                lh_pht: homerow_left {
                        compatible = "zmk,behavior-hold-tap";
                        label = "POSITIONAL_HOLD_TAP";
                        hold-trigger-key-positions = <RIGT_ROWS_012 41>;
                        #binding-cells = <2>; bindings = <&kp>, <&kp>;
                        flavor = "balanced"; tapping-term-ms = <400>;
                        
                };
                rh_pht: homerow_right {
                        compatible = "zmk,behavior-hold-tap";
                        label = "POSITIONAL_HOLD_TAPR";
                        hold-trigger-key-positions = <LEFT_ROWS_012 36>;
                        #binding-cells = <2>; bindings = <&kp>, <&kp>;
                        //flavor = "hold-preferred"; quick-tap-ms = <200>; tapping-term-ms = <400>;
                        flavor = "balanced"; tapping-term-ms = <400>;
                };
            };

        keymap { compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &kp ESC   &kp DE_Q          &kp DE_W          &kp DE_F             &kp DE_P             &kp DE_B             &kp DE_J      &kp DE_L              &kp DE_U               &kp DE_Y          &kp DE_SS         &kp DE_PLUS
   &kp TAB   &lh_pht LALT DE_A &lh_pht LGUI DE_R &lh_pht LCTRL DE_S   &lh_pht LSHIFT DE_T  &kp DE_G             &kp DE_M      &rh_pht RSHIFT DE_N   &rh_pht RCTRL DE_E     &rh_pht RGUI DE_I &rh_pht LALT DE_O &kp DE_HASH
   &kp LCTRL &kp DE_Z          &kp DE_X          &kp DE_C             &kp DE_D             &kp DE_V             &kp DE_K      &kp DE_H              &kp DE_COMM            &kp DE_DOT        &kp DE_MINS       &kp RSHIFT
                                                 &kp BSPC             &lt LOWER SPACE      &to DEFAULT          &kp DEL       &kp SPACE             &lt RAISE RET
                        >;      
                };

                layer_LOWER {
                        bindings = <
   &kp DE_CIRC &kp DE_EXLM  &kp DE_DQUO  &kp DE_DLR   &kp DE_AMPR  &kp DE_PERC    &none    &kp DE_LPRN   &kp DE_RPRN     &kp DE_MINS &kp DE_EQL   &kp DE_BSLS  
   &kp DE_PIPE &kp DE_AT    &kp DE_TILD  &kp DE_EURO  &none        &none          &none    &kp DE_LCBR   &kp DE_RCBR     &kp DE_LBRC &kp DE_RBRC  &kp DE_QUOT
   &none       &none        &kp DE_DEG   &kp DE_SECT  &none        &none          &none    &kp DE_LABK   &kp DE_RABK     &kp DE_COLN &kp DE_SLSH  &kp DE_GRV
                          	         &trans       &trans       &trans         &trans   &trans        &trans
                        >;
                };
                
                layer_RAISE {
                        bindings = <
   &none       &kp N1            &kp N2  &kp N3           &kp N4            &kp N5                   &kp N6    &kp N7              &kp N8                 &kp N9    &kp N0              &kp HOME
   &none       &lh_pht LALT F1   &kp F2  &lh_pht LCTRL F3 &lh_pht LSHIFT F4 &kp F5                   &kp F6    &rh_pht RSHFT LEFT  &rh_pht RCTRL DOWN     &kp UP    &rh_pht LALT RIGHT  &none
   &none       &kp F7            &kp F8  &kp F9           &kp F10           &kp F11                  &kp F12   &kp HOME            &kp PG_DN              &kp PG_UP &kp END             &kp END 
                                         &trans           &trans            &trans                   &trans    &trans              &trans
                        >;
                };

                layer_ADJUST {
                       bindings = <
   &out OUT_BLE     &bt BT0      &bt BT3       &none    &none    &none              &none   &kp C_VOLUME_UP    &kp C_PREVIOUS     &kp C_NEXT   &none      &none 
   &out OUT_USB     &bt BT1      &bt BT4       &none    &none    &none              &none   &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE   &none        &none      &none 
   &none            &bt BT2      &bt BT_CLR    &none    &none    &none              &none   &none              &none              &none        &none      &none 
                                               &trans   &trans   &trans             &trans  &trans             &trans
                        >;
                };
        };
};